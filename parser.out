Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assign
Rule 2     statement -> expression
Rule 3     arglist -> expression
Rule 4     arglist -> arglist COMMA expression
Rule 5     name -> OPERATOR
Rule 6     name -> NAME
Rule 7     call -> name LPAREN RPAREN
Rule 8     call -> name LPAREN arglist RPAREN
Rule 9     call -> LPAREN expression RPAREN LPAREN RPAREN
Rule 10    call -> LPAREN expression RPAREN LPAREN arglist RPAREN
Rule 11    assign -> name COLON expression
Rule 12    expression -> name
Rule 13    expression -> operator_invocation
Rule 14    expression -> call
Rule 15    expression -> literal
Rule 16    expression -> LPAREN expression RPAREN
Rule 17    literal -> NUMBER
Rule 18    literal -> list
Rule 19    literal -> set
Rule 20    literal -> lambda
Rule 21    literal -> STRING
Rule 22    set -> LBRACE arglist RBRACE
Rule 23    set -> LBRACE RBRACE
Rule 24    list -> LBRACKET arglist RBRACKET
Rule 25    list -> LBRACKET RBRACKET
Rule 26    lambda -> name MAPSTO expression
Rule 27    lambda -> LPAREN capture_list RPAREN_MAPSTO expression
Rule 28    capture_list -> name
Rule 29    capture_list -> capture_list COMMA name
Rule 30    operator_invocation -> expression OPERATOR expression

Terminals, with rules where they appear

COLON                : 11
COMMA                : 4 29
LBRACE               : 22 23
LBRACKET             : 24 25
LPAREN               : 7 8 9 9 10 10 16 27
MAPSTO               : 26
NAME                 : 6
NUMBER               : 17
OPERATOR             : 5 30
RBRACE               : 22 23
RBRACKET             : 24 25
RPAREN               : 7 8 9 9 10 10 16
RPAREN_MAPSTO        : 27
STRING               : 21
error                : 

Nonterminals, with rules where they appear

arglist              : 4 8 10 22 24
assign               : 1
call                 : 14
capture_list         : 27 29
expression           : 2 3 4 9 10 11 16 26 27 30 30
lambda               : 20
list                 : 18
literal              : 15
name                 : 7 8 11 12 26 28 29
operator_invocation  : 13
set                  : 19
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assign
    (2) statement -> . expression
    (11) assign -> . name COLON expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    statement                      shift and go to state 1
    assign                         shift and go to state 2
    expression                     shift and go to state 3
    name                           shift and go to state 4
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 1

    (0) S' -> statement .



state 2

    (1) statement -> assign .

    $end            reduce using rule 1 (statement -> assign .)


state 3

    (2) statement -> expression .
    (30) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 2 (statement -> expression .)
    OPERATOR        shift and go to state 18


state 4

    (11) assign -> name . COLON expression
    (12) expression -> name .
    (7) call -> name . LPAREN RPAREN
    (8) call -> name . LPAREN arglist RPAREN
    (26) lambda -> name . MAPSTO expression

    COLON           shift and go to state 19
    OPERATOR        reduce using rule 12 (expression -> name .)
    $end            reduce using rule 12 (expression -> name .)
    LPAREN          shift and go to state 20
    MAPSTO          shift and go to state 21


state 5

    (13) expression -> operator_invocation .

    OPERATOR        reduce using rule 13 (expression -> operator_invocation .)
    $end            reduce using rule 13 (expression -> operator_invocation .)
    RPAREN          reduce using rule 13 (expression -> operator_invocation .)
    RBRACKET        reduce using rule 13 (expression -> operator_invocation .)
    COMMA           reduce using rule 13 (expression -> operator_invocation .)
    RBRACE          reduce using rule 13 (expression -> operator_invocation .)


state 6

    (14) expression -> call .

    OPERATOR        reduce using rule 14 (expression -> call .)
    $end            reduce using rule 14 (expression -> call .)
    RPAREN          reduce using rule 14 (expression -> call .)
    RBRACKET        reduce using rule 14 (expression -> call .)
    COMMA           reduce using rule 14 (expression -> call .)
    RBRACE          reduce using rule 14 (expression -> call .)


state 7

    (15) expression -> literal .

    OPERATOR        reduce using rule 15 (expression -> literal .)
    $end            reduce using rule 15 (expression -> literal .)
    RPAREN          reduce using rule 15 (expression -> literal .)
    RBRACKET        reduce using rule 15 (expression -> literal .)
    COMMA           reduce using rule 15 (expression -> literal .)
    RBRACE          reduce using rule 15 (expression -> literal .)


state 8

    (16) expression -> LPAREN . expression RPAREN
    (9) call -> LPAREN . expression RPAREN LPAREN RPAREN
    (10) call -> LPAREN . expression RPAREN LPAREN arglist RPAREN
    (27) lambda -> LPAREN . capture_list RPAREN_MAPSTO expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (28) capture_list -> . name
    (29) capture_list -> . capture_list COMMA name
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    expression                     shift and go to state 22
    capture_list                   shift and go to state 23
    name                           shift and go to state 24
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 9

    (5) name -> OPERATOR .

    COLON           reduce using rule 5 (name -> OPERATOR .)
    LPAREN          reduce using rule 5 (name -> OPERATOR .)
    MAPSTO          reduce using rule 5 (name -> OPERATOR .)
    OPERATOR        reduce using rule 5 (name -> OPERATOR .)
    $end            reduce using rule 5 (name -> OPERATOR .)
    RPAREN          reduce using rule 5 (name -> OPERATOR .)
    RPAREN_MAPSTO   reduce using rule 5 (name -> OPERATOR .)
    COMMA           reduce using rule 5 (name -> OPERATOR .)
    RBRACKET        reduce using rule 5 (name -> OPERATOR .)
    RBRACE          reduce using rule 5 (name -> OPERATOR .)


state 10

    (6) name -> NAME .

    COLON           reduce using rule 6 (name -> NAME .)
    LPAREN          reduce using rule 6 (name -> NAME .)
    MAPSTO          reduce using rule 6 (name -> NAME .)
    OPERATOR        reduce using rule 6 (name -> NAME .)
    $end            reduce using rule 6 (name -> NAME .)
    RPAREN          reduce using rule 6 (name -> NAME .)
    RPAREN_MAPSTO   reduce using rule 6 (name -> NAME .)
    COMMA           reduce using rule 6 (name -> NAME .)
    RBRACKET        reduce using rule 6 (name -> NAME .)
    RBRACE          reduce using rule 6 (name -> NAME .)


state 11

    (17) literal -> NUMBER .

    OPERATOR        reduce using rule 17 (literal -> NUMBER .)
    $end            reduce using rule 17 (literal -> NUMBER .)
    RPAREN          reduce using rule 17 (literal -> NUMBER .)
    RBRACKET        reduce using rule 17 (literal -> NUMBER .)
    COMMA           reduce using rule 17 (literal -> NUMBER .)
    RBRACE          reduce using rule 17 (literal -> NUMBER .)


state 12

    (18) literal -> list .

    OPERATOR        reduce using rule 18 (literal -> list .)
    $end            reduce using rule 18 (literal -> list .)
    RPAREN          reduce using rule 18 (literal -> list .)
    RBRACKET        reduce using rule 18 (literal -> list .)
    COMMA           reduce using rule 18 (literal -> list .)
    RBRACE          reduce using rule 18 (literal -> list .)


state 13

    (19) literal -> set .

    OPERATOR        reduce using rule 19 (literal -> set .)
    $end            reduce using rule 19 (literal -> set .)
    RPAREN          reduce using rule 19 (literal -> set .)
    RBRACKET        reduce using rule 19 (literal -> set .)
    COMMA           reduce using rule 19 (literal -> set .)
    RBRACE          reduce using rule 19 (literal -> set .)


state 14

    (20) literal -> lambda .

    OPERATOR        reduce using rule 20 (literal -> lambda .)
    $end            reduce using rule 20 (literal -> lambda .)
    RPAREN          reduce using rule 20 (literal -> lambda .)
    RBRACKET        reduce using rule 20 (literal -> lambda .)
    COMMA           reduce using rule 20 (literal -> lambda .)
    RBRACE          reduce using rule 20 (literal -> lambda .)


state 15

    (21) literal -> STRING .

    OPERATOR        reduce using rule 21 (literal -> STRING .)
    $end            reduce using rule 21 (literal -> STRING .)
    RPAREN          reduce using rule 21 (literal -> STRING .)
    RBRACKET        reduce using rule 21 (literal -> STRING .)
    COMMA           reduce using rule 21 (literal -> STRING .)
    RBRACE          reduce using rule 21 (literal -> STRING .)


state 16

    (24) list -> LBRACKET . arglist RBRACKET
    (25) list -> LBRACKET . RBRACKET
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    RBRACKET        shift and go to state 26
    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    arglist                        shift and go to state 25
    expression                     shift and go to state 27
    name                           shift and go to state 28
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 17

    (22) set -> LBRACE . arglist RBRACE
    (23) set -> LBRACE . RBRACE
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    RBRACE          shift and go to state 30
    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    arglist                        shift and go to state 29
    expression                     shift and go to state 27
    name                           shift and go to state 28
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 18

    (30) operator_invocation -> expression OPERATOR . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    expression                     shift and go to state 31
    name                           shift and go to state 28
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 19

    (11) assign -> name COLON . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    name                           shift and go to state 28
    expression                     shift and go to state 32
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 20

    (7) call -> name LPAREN . RPAREN
    (8) call -> name LPAREN . arglist RPAREN
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    RPAREN          shift and go to state 33
    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    name                           shift and go to state 28
    arglist                        shift and go to state 34
    expression                     shift and go to state 27
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 21

    (26) lambda -> name MAPSTO . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    name                           shift and go to state 28
    expression                     shift and go to state 35
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 22

    (16) expression -> LPAREN expression . RPAREN
    (9) call -> LPAREN expression . RPAREN LPAREN RPAREN
    (10) call -> LPAREN expression . RPAREN LPAREN arglist RPAREN
    (30) operator_invocation -> expression . OPERATOR expression

    RPAREN          shift and go to state 36
    OPERATOR        shift and go to state 18


state 23

    (27) lambda -> LPAREN capture_list . RPAREN_MAPSTO expression
    (29) capture_list -> capture_list . COMMA name

    RPAREN_MAPSTO   shift and go to state 37
    COMMA           shift and go to state 38


state 24

    (12) expression -> name .
    (28) capture_list -> name .
    (7) call -> name . LPAREN RPAREN
    (8) call -> name . LPAREN arglist RPAREN
    (26) lambda -> name . MAPSTO expression

    RPAREN          reduce using rule 12 (expression -> name .)
    OPERATOR        reduce using rule 12 (expression -> name .)
    RPAREN_MAPSTO   reduce using rule 28 (capture_list -> name .)
    COMMA           reduce using rule 28 (capture_list -> name .)
    LPAREN          shift and go to state 20
    MAPSTO          shift and go to state 21


state 25

    (24) list -> LBRACKET arglist . RBRACKET
    (4) arglist -> arglist . COMMA expression

    RBRACKET        shift and go to state 39
    COMMA           shift and go to state 40


state 26

    (25) list -> LBRACKET RBRACKET .

    OPERATOR        reduce using rule 25 (list -> LBRACKET RBRACKET .)
    $end            reduce using rule 25 (list -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 25 (list -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 25 (list -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 25 (list -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 25 (list -> LBRACKET RBRACKET .)


state 27

    (3) arglist -> expression .
    (30) operator_invocation -> expression . OPERATOR expression

    RBRACKET        reduce using rule 3 (arglist -> expression .)
    COMMA           reduce using rule 3 (arglist -> expression .)
    RBRACE          reduce using rule 3 (arglist -> expression .)
    RPAREN          reduce using rule 3 (arglist -> expression .)
    OPERATOR        shift and go to state 18


state 28

    (12) expression -> name .
    (7) call -> name . LPAREN RPAREN
    (8) call -> name . LPAREN arglist RPAREN
    (26) lambda -> name . MAPSTO expression

    OPERATOR        reduce using rule 12 (expression -> name .)
    RBRACKET        reduce using rule 12 (expression -> name .)
    COMMA           reduce using rule 12 (expression -> name .)
    RBRACE          reduce using rule 12 (expression -> name .)
    $end            reduce using rule 12 (expression -> name .)
    RPAREN          reduce using rule 12 (expression -> name .)
    LPAREN          shift and go to state 20
    MAPSTO          shift and go to state 21


state 29

    (22) set -> LBRACE arglist . RBRACE
    (4) arglist -> arglist . COMMA expression

    RBRACE          shift and go to state 41
    COMMA           shift and go to state 40


state 30

    (23) set -> LBRACE RBRACE .

    OPERATOR        reduce using rule 23 (set -> LBRACE RBRACE .)
    $end            reduce using rule 23 (set -> LBRACE RBRACE .)
    RPAREN          reduce using rule 23 (set -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 23 (set -> LBRACE RBRACE .)
    COMMA           reduce using rule 23 (set -> LBRACE RBRACE .)
    RBRACE          reduce using rule 23 (set -> LBRACE RBRACE .)


state 31

    (30) operator_invocation -> expression OPERATOR expression .
    (30) operator_invocation -> expression . OPERATOR expression

    OPERATOR        reduce using rule 30 (operator_invocation -> expression OPERATOR expression .)
    $end            reduce using rule 30 (operator_invocation -> expression OPERATOR expression .)
    RPAREN          reduce using rule 30 (operator_invocation -> expression OPERATOR expression .)
    RBRACKET        reduce using rule 30 (operator_invocation -> expression OPERATOR expression .)
    COMMA           reduce using rule 30 (operator_invocation -> expression OPERATOR expression .)
    RBRACE          reduce using rule 30 (operator_invocation -> expression OPERATOR expression .)

  ! OPERATOR        [ shift and go to state 18 ]


state 32

    (11) assign -> name COLON expression .
    (30) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 11 (assign -> name COLON expression .)
    OPERATOR        shift and go to state 18


state 33

    (7) call -> name LPAREN RPAREN .

    OPERATOR        reduce using rule 7 (call -> name LPAREN RPAREN .)
    $end            reduce using rule 7 (call -> name LPAREN RPAREN .)
    RPAREN          reduce using rule 7 (call -> name LPAREN RPAREN .)
    RBRACKET        reduce using rule 7 (call -> name LPAREN RPAREN .)
    COMMA           reduce using rule 7 (call -> name LPAREN RPAREN .)
    RBRACE          reduce using rule 7 (call -> name LPAREN RPAREN .)


state 34

    (8) call -> name LPAREN arglist . RPAREN
    (4) arglist -> arglist . COMMA expression

    RPAREN          shift and go to state 42
    COMMA           shift and go to state 40


state 35

    (26) lambda -> name MAPSTO expression .
    (30) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 26 (lambda -> name MAPSTO expression .)
    RPAREN          reduce using rule 26 (lambda -> name MAPSTO expression .)
    RBRACKET        reduce using rule 26 (lambda -> name MAPSTO expression .)
    COMMA           reduce using rule 26 (lambda -> name MAPSTO expression .)
    RBRACE          reduce using rule 26 (lambda -> name MAPSTO expression .)
    OPERATOR        shift and go to state 18

  ! OPERATOR        [ reduce using rule 26 (lambda -> name MAPSTO expression .) ]


state 36

    (16) expression -> LPAREN expression RPAREN .
    (9) call -> LPAREN expression RPAREN . LPAREN RPAREN
    (10) call -> LPAREN expression RPAREN . LPAREN arglist RPAREN

    OPERATOR        reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    LPAREN          shift and go to state 43


state 37

    (27) lambda -> LPAREN capture_list RPAREN_MAPSTO . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    expression                     shift and go to state 44
    name                           shift and go to state 28
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 38

    (29) capture_list -> capture_list COMMA . name
    (5) name -> . OPERATOR
    (6) name -> . NAME

    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10

    name                           shift and go to state 45

state 39

    (24) list -> LBRACKET arglist RBRACKET .

    OPERATOR        reduce using rule 24 (list -> LBRACKET arglist RBRACKET .)
    $end            reduce using rule 24 (list -> LBRACKET arglist RBRACKET .)
    RPAREN          reduce using rule 24 (list -> LBRACKET arglist RBRACKET .)
    RBRACKET        reduce using rule 24 (list -> LBRACKET arglist RBRACKET .)
    COMMA           reduce using rule 24 (list -> LBRACKET arglist RBRACKET .)
    RBRACE          reduce using rule 24 (list -> LBRACKET arglist RBRACKET .)


state 40

    (4) arglist -> arglist COMMA . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    expression                     shift and go to state 46
    name                           shift and go to state 28
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 41

    (22) set -> LBRACE arglist RBRACE .

    OPERATOR        reduce using rule 22 (set -> LBRACE arglist RBRACE .)
    $end            reduce using rule 22 (set -> LBRACE arglist RBRACE .)
    RPAREN          reduce using rule 22 (set -> LBRACE arglist RBRACE .)
    RBRACKET        reduce using rule 22 (set -> LBRACE arglist RBRACE .)
    COMMA           reduce using rule 22 (set -> LBRACE arglist RBRACE .)
    RBRACE          reduce using rule 22 (set -> LBRACE arglist RBRACE .)


state 42

    (8) call -> name LPAREN arglist RPAREN .

    OPERATOR        reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    $end            reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    RBRACKET        reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    COMMA           reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    RBRACE          reduce using rule 8 (call -> name LPAREN arglist RPAREN .)


state 43

    (9) call -> LPAREN expression RPAREN LPAREN . RPAREN
    (10) call -> LPAREN expression RPAREN LPAREN . arglist RPAREN
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . call
    (15) expression -> . literal
    (16) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (30) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (17) literal -> . NUMBER
    (18) literal -> . list
    (19) literal -> . set
    (20) literal -> . lambda
    (21) literal -> . STRING
    (24) list -> . LBRACKET arglist RBRACKET
    (25) list -> . LBRACKET RBRACKET
    (22) set -> . LBRACE arglist RBRACE
    (23) set -> . LBRACE RBRACE
    (26) lambda -> . name MAPSTO expression
    (27) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    RPAREN          shift and go to state 47
    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    STRING          shift and go to state 15
    LBRACKET        shift and go to state 16
    LBRACE          shift and go to state 17

    expression                     shift and go to state 27
    arglist                        shift and go to state 48
    name                           shift and go to state 28
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 44

    (27) lambda -> LPAREN capture_list RPAREN_MAPSTO expression .
    (30) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 27 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    RPAREN          reduce using rule 27 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    RBRACKET        reduce using rule 27 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    COMMA           reduce using rule 27 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    RBRACE          reduce using rule 27 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    OPERATOR        shift and go to state 18

  ! OPERATOR        [ reduce using rule 27 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .) ]


state 45

    (29) capture_list -> capture_list COMMA name .

    RPAREN_MAPSTO   reduce using rule 29 (capture_list -> capture_list COMMA name .)
    COMMA           reduce using rule 29 (capture_list -> capture_list COMMA name .)


state 46

    (4) arglist -> arglist COMMA expression .
    (30) operator_invocation -> expression . OPERATOR expression

    RBRACKET        reduce using rule 4 (arglist -> arglist COMMA expression .)
    COMMA           reduce using rule 4 (arglist -> arglist COMMA expression .)
    RBRACE          reduce using rule 4 (arglist -> arglist COMMA expression .)
    RPAREN          reduce using rule 4 (arglist -> arglist COMMA expression .)
    OPERATOR        shift and go to state 18


state 47

    (9) call -> LPAREN expression RPAREN LPAREN RPAREN .

    OPERATOR        reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    $end            reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    RPAREN          reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    RBRACKET        reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    COMMA           reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    RBRACE          reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)


state 48

    (10) call -> LPAREN expression RPAREN LPAREN arglist . RPAREN
    (4) arglist -> arglist . COMMA expression

    RPAREN          shift and go to state 49
    COMMA           shift and go to state 40


state 49

    (10) call -> LPAREN expression RPAREN LPAREN arglist RPAREN .

    OPERATOR        reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    $end            reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    RBRACKET        reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    COMMA           reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    RBRACE          reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)

