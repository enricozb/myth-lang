Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assign
Rule 2     statement -> expression
Rule 3     arglist -> expression
Rule 4     arglist -> arglist COMMA expression
Rule 5     name -> OPERATOR
Rule 6     name -> NAME
Rule 7     call -> name LPAREN RPAREN
Rule 8     call -> name LPAREN arglist RPAREN
Rule 9     call -> LPAREN expression RPAREN LPAREN RPAREN
Rule 10    call -> LPAREN expression RPAREN LPAREN arglist RPAREN
Rule 11    assign -> name COLON expression
Rule 12    expression -> name
Rule 13    expression -> operator_invocation
Rule 14    expression -> conditional
Rule 15    expression -> call
Rule 16    expression -> literal
Rule 17    expression -> LPAREN expression RPAREN
Rule 18    conditional -> BAR LPAREN expression RPAREN_MAPSTO expression
Rule 19    conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO expression
Rule 20    literal -> NUMBER
Rule 21    literal -> list
Rule 22    literal -> set
Rule 23    literal -> lambda
Rule 24    literal -> STRING
Rule 25    set -> LBRACE arglist RBRACE
Rule 26    set -> LBRACE RBRACE
Rule 27    list -> LBRACKET arglist RBRACKET
Rule 28    list -> LBRACKET RBRACKET
Rule 29    lambda -> NAME MAPSTO expression
Rule 30    lambda -> LPAREN capture_list RPAREN_MAPSTO expression
Rule 31    capture_list -> name
Rule 32    capture_list -> capture_list COMMA name
Rule 33    operator_invocation -> expression OPERATOR expression

Terminals, with rules where they appear

BAR                  : 18 19
COLON                : 11
COMMA                : 4 32
LBRACE               : 25 26
LBRACKET             : 27 28
LPAREN               : 7 8 9 9 10 10 17 18 19 30
MAPSTO               : 29
NAME                 : 6 29
NUMBER               : 20
OPERATOR             : 5 33
RBRACE               : 25 26
RBRACKET             : 27 28
RPAREN               : 7 8 9 9 10 10 17
RPAREN_MAPSTO        : 18 19 30
STRING               : 24
error                : 

Nonterminals, with rules where they appear

arglist              : 4 8 10 25 27
assign               : 1
call                 : 15
capture_list         : 30 32
conditional          : 14 19
expression           : 2 3 4 9 10 11 17 18 18 19 19 29 30 33 33
lambda               : 23
list                 : 21
literal              : 16
name                 : 7 8 11 12 31 32
operator_invocation  : 13
set                  : 22
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assign
    (2) statement -> . expression
    (11) assign -> . name COLON expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    statement                      shift and go to state 1
    assign                         shift and go to state 2
    expression                     shift and go to state 3
    name                           shift and go to state 4
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 1

    (0) S' -> statement .



state 2

    (1) statement -> assign .

    $end            reduce using rule 1 (statement -> assign .)


state 3

    (2) statement -> expression .
    (33) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 2 (statement -> expression .)
    OPERATOR        shift and go to state 20


state 4

    (11) assign -> name . COLON expression
    (12) expression -> name .
    (7) call -> name . LPAREN RPAREN
    (8) call -> name . LPAREN arglist RPAREN

    COLON           shift and go to state 21
    OPERATOR        reduce using rule 12 (expression -> name .)
    $end            reduce using rule 12 (expression -> name .)
    LPAREN          shift and go to state 22


state 5

    (13) expression -> operator_invocation .

    OPERATOR        reduce using rule 13 (expression -> operator_invocation .)
    $end            reduce using rule 13 (expression -> operator_invocation .)
    RPAREN          reduce using rule 13 (expression -> operator_invocation .)
    RBRACKET        reduce using rule 13 (expression -> operator_invocation .)
    COMMA           reduce using rule 13 (expression -> operator_invocation .)
    RBRACE          reduce using rule 13 (expression -> operator_invocation .)
    RPAREN_MAPSTO   reduce using rule 13 (expression -> operator_invocation .)
    BAR             reduce using rule 13 (expression -> operator_invocation .)


state 6

    (14) expression -> conditional .
    (19) conditional -> conditional . BAR LPAREN expression RPAREN_MAPSTO expression

  ! shift/reduce conflict for BAR resolved as shift
    OPERATOR        reduce using rule 14 (expression -> conditional .)
    $end            reduce using rule 14 (expression -> conditional .)
    RPAREN          reduce using rule 14 (expression -> conditional .)
    RBRACKET        reduce using rule 14 (expression -> conditional .)
    COMMA           reduce using rule 14 (expression -> conditional .)
    RBRACE          reduce using rule 14 (expression -> conditional .)
    RPAREN_MAPSTO   reduce using rule 14 (expression -> conditional .)
    BAR             shift and go to state 23

  ! BAR             [ reduce using rule 14 (expression -> conditional .) ]


state 7

    (15) expression -> call .

    OPERATOR        reduce using rule 15 (expression -> call .)
    $end            reduce using rule 15 (expression -> call .)
    RPAREN          reduce using rule 15 (expression -> call .)
    RBRACKET        reduce using rule 15 (expression -> call .)
    COMMA           reduce using rule 15 (expression -> call .)
    RBRACE          reduce using rule 15 (expression -> call .)
    RPAREN_MAPSTO   reduce using rule 15 (expression -> call .)
    BAR             reduce using rule 15 (expression -> call .)


state 8

    (16) expression -> literal .

    OPERATOR        reduce using rule 16 (expression -> literal .)
    $end            reduce using rule 16 (expression -> literal .)
    RPAREN          reduce using rule 16 (expression -> literal .)
    RBRACKET        reduce using rule 16 (expression -> literal .)
    COMMA           reduce using rule 16 (expression -> literal .)
    RBRACE          reduce using rule 16 (expression -> literal .)
    RPAREN_MAPSTO   reduce using rule 16 (expression -> literal .)
    BAR             reduce using rule 16 (expression -> literal .)


state 9

    (17) expression -> LPAREN . expression RPAREN
    (9) call -> LPAREN . expression RPAREN LPAREN RPAREN
    (10) call -> LPAREN . expression RPAREN LPAREN arglist RPAREN
    (30) lambda -> LPAREN . capture_list RPAREN_MAPSTO expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (31) capture_list -> . name
    (32) capture_list -> . capture_list COMMA name
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    expression                     shift and go to state 24
    capture_list                   shift and go to state 25
    name                           shift and go to state 26
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 10

    (5) name -> OPERATOR .

    COLON           reduce using rule 5 (name -> OPERATOR .)
    LPAREN          reduce using rule 5 (name -> OPERATOR .)
    OPERATOR        reduce using rule 5 (name -> OPERATOR .)
    $end            reduce using rule 5 (name -> OPERATOR .)
    RPAREN          reduce using rule 5 (name -> OPERATOR .)
    RPAREN_MAPSTO   reduce using rule 5 (name -> OPERATOR .)
    COMMA           reduce using rule 5 (name -> OPERATOR .)
    RBRACKET        reduce using rule 5 (name -> OPERATOR .)
    RBRACE          reduce using rule 5 (name -> OPERATOR .)
    BAR             reduce using rule 5 (name -> OPERATOR .)


state 11

    (6) name -> NAME .
    (29) lambda -> NAME . MAPSTO expression

    COLON           reduce using rule 6 (name -> NAME .)
    LPAREN          reduce using rule 6 (name -> NAME .)
    OPERATOR        reduce using rule 6 (name -> NAME .)
    $end            reduce using rule 6 (name -> NAME .)
    RPAREN          reduce using rule 6 (name -> NAME .)
    RPAREN_MAPSTO   reduce using rule 6 (name -> NAME .)
    COMMA           reduce using rule 6 (name -> NAME .)
    RBRACKET        reduce using rule 6 (name -> NAME .)
    RBRACE          reduce using rule 6 (name -> NAME .)
    BAR             reduce using rule 6 (name -> NAME .)
    MAPSTO          shift and go to state 27


state 12

    (18) conditional -> BAR . LPAREN expression RPAREN_MAPSTO expression

    LPAREN          shift and go to state 28


state 13

    (20) literal -> NUMBER .

    OPERATOR        reduce using rule 20 (literal -> NUMBER .)
    $end            reduce using rule 20 (literal -> NUMBER .)
    RPAREN          reduce using rule 20 (literal -> NUMBER .)
    RBRACKET        reduce using rule 20 (literal -> NUMBER .)
    COMMA           reduce using rule 20 (literal -> NUMBER .)
    RBRACE          reduce using rule 20 (literal -> NUMBER .)
    RPAREN_MAPSTO   reduce using rule 20 (literal -> NUMBER .)
    BAR             reduce using rule 20 (literal -> NUMBER .)


state 14

    (21) literal -> list .

    OPERATOR        reduce using rule 21 (literal -> list .)
    $end            reduce using rule 21 (literal -> list .)
    RPAREN          reduce using rule 21 (literal -> list .)
    RBRACKET        reduce using rule 21 (literal -> list .)
    COMMA           reduce using rule 21 (literal -> list .)
    RBRACE          reduce using rule 21 (literal -> list .)
    RPAREN_MAPSTO   reduce using rule 21 (literal -> list .)
    BAR             reduce using rule 21 (literal -> list .)


state 15

    (22) literal -> set .

    OPERATOR        reduce using rule 22 (literal -> set .)
    $end            reduce using rule 22 (literal -> set .)
    RPAREN          reduce using rule 22 (literal -> set .)
    RBRACKET        reduce using rule 22 (literal -> set .)
    COMMA           reduce using rule 22 (literal -> set .)
    RBRACE          reduce using rule 22 (literal -> set .)
    RPAREN_MAPSTO   reduce using rule 22 (literal -> set .)
    BAR             reduce using rule 22 (literal -> set .)


state 16

    (23) literal -> lambda .

    OPERATOR        reduce using rule 23 (literal -> lambda .)
    $end            reduce using rule 23 (literal -> lambda .)
    RPAREN          reduce using rule 23 (literal -> lambda .)
    RBRACKET        reduce using rule 23 (literal -> lambda .)
    COMMA           reduce using rule 23 (literal -> lambda .)
    RBRACE          reduce using rule 23 (literal -> lambda .)
    RPAREN_MAPSTO   reduce using rule 23 (literal -> lambda .)
    BAR             reduce using rule 23 (literal -> lambda .)


state 17

    (24) literal -> STRING .

    OPERATOR        reduce using rule 24 (literal -> STRING .)
    $end            reduce using rule 24 (literal -> STRING .)
    RPAREN          reduce using rule 24 (literal -> STRING .)
    RBRACKET        reduce using rule 24 (literal -> STRING .)
    COMMA           reduce using rule 24 (literal -> STRING .)
    RBRACE          reduce using rule 24 (literal -> STRING .)
    RPAREN_MAPSTO   reduce using rule 24 (literal -> STRING .)
    BAR             reduce using rule 24 (literal -> STRING .)


state 18

    (27) list -> LBRACKET . arglist RBRACKET
    (28) list -> LBRACKET . RBRACKET
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    RBRACKET        shift and go to state 30
    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    arglist                        shift and go to state 29
    expression                     shift and go to state 31
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 19

    (25) set -> LBRACE . arglist RBRACE
    (26) set -> LBRACE . RBRACE
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    RBRACE          shift and go to state 34
    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    arglist                        shift and go to state 33
    expression                     shift and go to state 31
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 20

    (33) operator_invocation -> expression OPERATOR . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    expression                     shift and go to state 35
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 21

    (11) assign -> name COLON . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    name                           shift and go to state 32
    expression                     shift and go to state 36
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 22

    (7) call -> name LPAREN . RPAREN
    (8) call -> name LPAREN . arglist RPAREN
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    RPAREN          shift and go to state 37
    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    name                           shift and go to state 32
    arglist                        shift and go to state 38
    expression                     shift and go to state 31
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 23

    (19) conditional -> conditional BAR . LPAREN expression RPAREN_MAPSTO expression

    LPAREN          shift and go to state 39


state 24

    (17) expression -> LPAREN expression . RPAREN
    (9) call -> LPAREN expression . RPAREN LPAREN RPAREN
    (10) call -> LPAREN expression . RPAREN LPAREN arglist RPAREN
    (33) operator_invocation -> expression . OPERATOR expression

    RPAREN          shift and go to state 40
    OPERATOR        shift and go to state 20


state 25

    (30) lambda -> LPAREN capture_list . RPAREN_MAPSTO expression
    (32) capture_list -> capture_list . COMMA name

    RPAREN_MAPSTO   shift and go to state 41
    COMMA           shift and go to state 42


state 26

    (12) expression -> name .
    (31) capture_list -> name .
    (7) call -> name . LPAREN RPAREN
    (8) call -> name . LPAREN arglist RPAREN

    RPAREN          reduce using rule 12 (expression -> name .)
    OPERATOR        reduce using rule 12 (expression -> name .)
    RPAREN_MAPSTO   reduce using rule 31 (capture_list -> name .)
    COMMA           reduce using rule 31 (capture_list -> name .)
    LPAREN          shift and go to state 22


state 27

    (29) lambda -> NAME MAPSTO . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    expression                     shift and go to state 43
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 28

    (18) conditional -> BAR LPAREN . expression RPAREN_MAPSTO expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    expression                     shift and go to state 44
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 29

    (27) list -> LBRACKET arglist . RBRACKET
    (4) arglist -> arglist . COMMA expression

    RBRACKET        shift and go to state 45
    COMMA           shift and go to state 46


state 30

    (28) list -> LBRACKET RBRACKET .

    OPERATOR        reduce using rule 28 (list -> LBRACKET RBRACKET .)
    $end            reduce using rule 28 (list -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 28 (list -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 28 (list -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 28 (list -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 28 (list -> LBRACKET RBRACKET .)
    RPAREN_MAPSTO   reduce using rule 28 (list -> LBRACKET RBRACKET .)
    BAR             reduce using rule 28 (list -> LBRACKET RBRACKET .)


state 31

    (3) arglist -> expression .
    (33) operator_invocation -> expression . OPERATOR expression

    RBRACKET        reduce using rule 3 (arglist -> expression .)
    COMMA           reduce using rule 3 (arglist -> expression .)
    RBRACE          reduce using rule 3 (arglist -> expression .)
    RPAREN          reduce using rule 3 (arglist -> expression .)
    OPERATOR        shift and go to state 20


state 32

    (12) expression -> name .
    (7) call -> name . LPAREN RPAREN
    (8) call -> name . LPAREN arglist RPAREN

    OPERATOR        reduce using rule 12 (expression -> name .)
    RBRACKET        reduce using rule 12 (expression -> name .)
    COMMA           reduce using rule 12 (expression -> name .)
    RBRACE          reduce using rule 12 (expression -> name .)
    $end            reduce using rule 12 (expression -> name .)
    RPAREN          reduce using rule 12 (expression -> name .)
    RPAREN_MAPSTO   reduce using rule 12 (expression -> name .)
    BAR             reduce using rule 12 (expression -> name .)
    LPAREN          shift and go to state 22


state 33

    (25) set -> LBRACE arglist . RBRACE
    (4) arglist -> arglist . COMMA expression

    RBRACE          shift and go to state 47
    COMMA           shift and go to state 46


state 34

    (26) set -> LBRACE RBRACE .

    OPERATOR        reduce using rule 26 (set -> LBRACE RBRACE .)
    $end            reduce using rule 26 (set -> LBRACE RBRACE .)
    RPAREN          reduce using rule 26 (set -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 26 (set -> LBRACE RBRACE .)
    COMMA           reduce using rule 26 (set -> LBRACE RBRACE .)
    RBRACE          reduce using rule 26 (set -> LBRACE RBRACE .)
    RPAREN_MAPSTO   reduce using rule 26 (set -> LBRACE RBRACE .)
    BAR             reduce using rule 26 (set -> LBRACE RBRACE .)


state 35

    (33) operator_invocation -> expression OPERATOR expression .
    (33) operator_invocation -> expression . OPERATOR expression

    OPERATOR        reduce using rule 33 (operator_invocation -> expression OPERATOR expression .)
    $end            reduce using rule 33 (operator_invocation -> expression OPERATOR expression .)
    RPAREN          reduce using rule 33 (operator_invocation -> expression OPERATOR expression .)
    RBRACKET        reduce using rule 33 (operator_invocation -> expression OPERATOR expression .)
    COMMA           reduce using rule 33 (operator_invocation -> expression OPERATOR expression .)
    RBRACE          reduce using rule 33 (operator_invocation -> expression OPERATOR expression .)
    RPAREN_MAPSTO   reduce using rule 33 (operator_invocation -> expression OPERATOR expression .)
    BAR             reduce using rule 33 (operator_invocation -> expression OPERATOR expression .)

  ! OPERATOR        [ shift and go to state 20 ]


state 36

    (11) assign -> name COLON expression .
    (33) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 11 (assign -> name COLON expression .)
    OPERATOR        shift and go to state 20


state 37

    (7) call -> name LPAREN RPAREN .

    OPERATOR        reduce using rule 7 (call -> name LPAREN RPAREN .)
    $end            reduce using rule 7 (call -> name LPAREN RPAREN .)
    RPAREN          reduce using rule 7 (call -> name LPAREN RPAREN .)
    RBRACKET        reduce using rule 7 (call -> name LPAREN RPAREN .)
    COMMA           reduce using rule 7 (call -> name LPAREN RPAREN .)
    RBRACE          reduce using rule 7 (call -> name LPAREN RPAREN .)
    RPAREN_MAPSTO   reduce using rule 7 (call -> name LPAREN RPAREN .)
    BAR             reduce using rule 7 (call -> name LPAREN RPAREN .)


state 38

    (8) call -> name LPAREN arglist . RPAREN
    (4) arglist -> arglist . COMMA expression

    RPAREN          shift and go to state 48
    COMMA           shift and go to state 46


state 39

    (19) conditional -> conditional BAR LPAREN . expression RPAREN_MAPSTO expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    conditional                    shift and go to state 6
    expression                     shift and go to state 49
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 40

    (17) expression -> LPAREN expression RPAREN .
    (9) call -> LPAREN expression RPAREN . LPAREN RPAREN
    (10) call -> LPAREN expression RPAREN . LPAREN arglist RPAREN

    OPERATOR        reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    RPAREN_MAPSTO   reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    BAR             reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    LPAREN          shift and go to state 50


state 41

    (30) lambda -> LPAREN capture_list RPAREN_MAPSTO . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    expression                     shift and go to state 51
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 42

    (32) capture_list -> capture_list COMMA . name
    (5) name -> . OPERATOR
    (6) name -> . NAME

    OPERATOR        shift and go to state 10
    NAME            shift and go to state 53

    name                           shift and go to state 52

state 43

    (29) lambda -> NAME MAPSTO expression .
    (33) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 29 (lambda -> NAME MAPSTO expression .)
    RPAREN          reduce using rule 29 (lambda -> NAME MAPSTO expression .)
    RBRACKET        reduce using rule 29 (lambda -> NAME MAPSTO expression .)
    COMMA           reduce using rule 29 (lambda -> NAME MAPSTO expression .)
    RBRACE          reduce using rule 29 (lambda -> NAME MAPSTO expression .)
    RPAREN_MAPSTO   reduce using rule 29 (lambda -> NAME MAPSTO expression .)
    BAR             reduce using rule 29 (lambda -> NAME MAPSTO expression .)
    OPERATOR        shift and go to state 20

  ! OPERATOR        [ reduce using rule 29 (lambda -> NAME MAPSTO expression .) ]


state 44

    (18) conditional -> BAR LPAREN expression . RPAREN_MAPSTO expression
    (33) operator_invocation -> expression . OPERATOR expression

    RPAREN_MAPSTO   shift and go to state 54
    OPERATOR        shift and go to state 20


state 45

    (27) list -> LBRACKET arglist RBRACKET .

    OPERATOR        reduce using rule 27 (list -> LBRACKET arglist RBRACKET .)
    $end            reduce using rule 27 (list -> LBRACKET arglist RBRACKET .)
    RPAREN          reduce using rule 27 (list -> LBRACKET arglist RBRACKET .)
    RBRACKET        reduce using rule 27 (list -> LBRACKET arglist RBRACKET .)
    COMMA           reduce using rule 27 (list -> LBRACKET arglist RBRACKET .)
    RBRACE          reduce using rule 27 (list -> LBRACKET arglist RBRACKET .)
    RPAREN_MAPSTO   reduce using rule 27 (list -> LBRACKET arglist RBRACKET .)
    BAR             reduce using rule 27 (list -> LBRACKET arglist RBRACKET .)


state 46

    (4) arglist -> arglist COMMA . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    expression                     shift and go to state 55
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 47

    (25) set -> LBRACE arglist RBRACE .

    OPERATOR        reduce using rule 25 (set -> LBRACE arglist RBRACE .)
    $end            reduce using rule 25 (set -> LBRACE arglist RBRACE .)
    RPAREN          reduce using rule 25 (set -> LBRACE arglist RBRACE .)
    RBRACKET        reduce using rule 25 (set -> LBRACE arglist RBRACE .)
    COMMA           reduce using rule 25 (set -> LBRACE arglist RBRACE .)
    RBRACE          reduce using rule 25 (set -> LBRACE arglist RBRACE .)
    RPAREN_MAPSTO   reduce using rule 25 (set -> LBRACE arglist RBRACE .)
    BAR             reduce using rule 25 (set -> LBRACE arglist RBRACE .)


state 48

    (8) call -> name LPAREN arglist RPAREN .

    OPERATOR        reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    $end            reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    RBRACKET        reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    COMMA           reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    RBRACE          reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    RPAREN_MAPSTO   reduce using rule 8 (call -> name LPAREN arglist RPAREN .)
    BAR             reduce using rule 8 (call -> name LPAREN arglist RPAREN .)


state 49

    (19) conditional -> conditional BAR LPAREN expression . RPAREN_MAPSTO expression
    (33) operator_invocation -> expression . OPERATOR expression

    RPAREN_MAPSTO   shift and go to state 56
    OPERATOR        shift and go to state 20


state 50

    (9) call -> LPAREN expression RPAREN LPAREN . RPAREN
    (10) call -> LPAREN expression RPAREN LPAREN . arglist RPAREN
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    RPAREN          shift and go to state 57
    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    expression                     shift and go to state 31
    arglist                        shift and go to state 58
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 51

    (30) lambda -> LPAREN capture_list RPAREN_MAPSTO expression .
    (33) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 30 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    RPAREN          reduce using rule 30 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    RBRACKET        reduce using rule 30 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    COMMA           reduce using rule 30 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    RBRACE          reduce using rule 30 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    RPAREN_MAPSTO   reduce using rule 30 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    BAR             reduce using rule 30 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    OPERATOR        shift and go to state 20

  ! OPERATOR        [ reduce using rule 30 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .) ]


state 52

    (32) capture_list -> capture_list COMMA name .

    RPAREN_MAPSTO   reduce using rule 32 (capture_list -> capture_list COMMA name .)
    COMMA           reduce using rule 32 (capture_list -> capture_list COMMA name .)


state 53

    (6) name -> NAME .

    RPAREN_MAPSTO   reduce using rule 6 (name -> NAME .)
    COMMA           reduce using rule 6 (name -> NAME .)


state 54

    (18) conditional -> BAR LPAREN expression RPAREN_MAPSTO . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    expression                     shift and go to state 59
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    conditional                    shift and go to state 6
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 55

    (4) arglist -> arglist COMMA expression .
    (33) operator_invocation -> expression . OPERATOR expression

    RBRACKET        reduce using rule 4 (arglist -> arglist COMMA expression .)
    COMMA           reduce using rule 4 (arglist -> arglist COMMA expression .)
    RBRACE          reduce using rule 4 (arglist -> arglist COMMA expression .)
    RPAREN          reduce using rule 4 (arglist -> arglist COMMA expression .)
    OPERATOR        shift and go to state 20


state 56

    (19) conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO . expression
    (12) expression -> . name
    (13) expression -> . operator_invocation
    (14) expression -> . conditional
    (15) expression -> . call
    (16) expression -> . literal
    (17) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (33) operator_invocation -> . expression OPERATOR expression
    (18) conditional -> . BAR LPAREN expression RPAREN_MAPSTO expression
    (19) conditional -> . conditional BAR LPAREN expression RPAREN_MAPSTO expression
    (7) call -> . name LPAREN RPAREN
    (8) call -> . name LPAREN arglist RPAREN
    (9) call -> . LPAREN expression RPAREN LPAREN RPAREN
    (10) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (20) literal -> . NUMBER
    (21) literal -> . list
    (22) literal -> . set
    (23) literal -> . lambda
    (24) literal -> . STRING
    (27) list -> . LBRACKET arglist RBRACKET
    (28) list -> . LBRACKET RBRACKET
    (25) set -> . LBRACE arglist RBRACE
    (26) set -> . LBRACE RBRACE
    (29) lambda -> . NAME MAPSTO expression
    (30) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 9
    OPERATOR        shift and go to state 10
    NAME            shift and go to state 11
    BAR             shift and go to state 12
    NUMBER          shift and go to state 13
    STRING          shift and go to state 17
    LBRACKET        shift and go to state 18
    LBRACE          shift and go to state 19

    conditional                    shift and go to state 6
    expression                     shift and go to state 60
    name                           shift and go to state 32
    operator_invocation            shift and go to state 5
    call                           shift and go to state 7
    literal                        shift and go to state 8
    list                           shift and go to state 14
    set                            shift and go to state 15
    lambda                         shift and go to state 16

state 57

    (9) call -> LPAREN expression RPAREN LPAREN RPAREN .

    OPERATOR        reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    $end            reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    RPAREN          reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    RBRACKET        reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    COMMA           reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    RBRACE          reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    RPAREN_MAPSTO   reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)
    BAR             reduce using rule 9 (call -> LPAREN expression RPAREN LPAREN RPAREN .)


state 58

    (10) call -> LPAREN expression RPAREN LPAREN arglist . RPAREN
    (4) arglist -> arglist . COMMA expression

    RPAREN          shift and go to state 61
    COMMA           shift and go to state 46


state 59

    (18) conditional -> BAR LPAREN expression RPAREN_MAPSTO expression .
    (33) operator_invocation -> expression . OPERATOR expression

    BAR             reduce using rule 18 (conditional -> BAR LPAREN expression RPAREN_MAPSTO expression .)
    $end            reduce using rule 18 (conditional -> BAR LPAREN expression RPAREN_MAPSTO expression .)
    RPAREN          reduce using rule 18 (conditional -> BAR LPAREN expression RPAREN_MAPSTO expression .)
    RBRACKET        reduce using rule 18 (conditional -> BAR LPAREN expression RPAREN_MAPSTO expression .)
    COMMA           reduce using rule 18 (conditional -> BAR LPAREN expression RPAREN_MAPSTO expression .)
    RBRACE          reduce using rule 18 (conditional -> BAR LPAREN expression RPAREN_MAPSTO expression .)
    RPAREN_MAPSTO   reduce using rule 18 (conditional -> BAR LPAREN expression RPAREN_MAPSTO expression .)
    OPERATOR        shift and go to state 20

  ! OPERATOR        [ reduce using rule 18 (conditional -> BAR LPAREN expression RPAREN_MAPSTO expression .) ]


state 60

    (19) conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO expression .
    (33) operator_invocation -> expression . OPERATOR expression

    BAR             reduce using rule 19 (conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO expression .)
    $end            reduce using rule 19 (conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO expression .)
    RPAREN          reduce using rule 19 (conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO expression .)
    RBRACKET        reduce using rule 19 (conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO expression .)
    COMMA           reduce using rule 19 (conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO expression .)
    RBRACE          reduce using rule 19 (conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO expression .)
    RPAREN_MAPSTO   reduce using rule 19 (conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO expression .)
    OPERATOR        shift and go to state 20

  ! OPERATOR        [ reduce using rule 19 (conditional -> conditional BAR LPAREN expression RPAREN_MAPSTO expression .) ]


state 61

    (10) call -> LPAREN expression RPAREN LPAREN arglist RPAREN .

    OPERATOR        reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    $end            reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    RBRACKET        reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    COMMA           reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    RBRACE          reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    RPAREN_MAPSTO   reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    BAR             reduce using rule 10 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BAR in state 6 resolved as shift
