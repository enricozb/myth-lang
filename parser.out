Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assign
Rule 2     statement -> expression
Rule 3     arglist -> expression
Rule 4     arglist -> arglist COMMA expression
Rule 5     name -> OPERATOR
Rule 6     name -> NAME
Rule 7     call -> name LPAREN arglist RPAREN
Rule 8     call -> LPAREN expression RPAREN LPAREN arglist RPAREN
Rule 9     assign -> name COLON expression
Rule 10    expression -> name
Rule 11    expression -> operator_invocation
Rule 12    expression -> call
Rule 13    expression -> literal
Rule 14    expression -> LPAREN expression RPAREN
Rule 15    literal -> NUMBER
Rule 16    literal -> list
Rule 17    literal -> set
Rule 18    literal -> lambda
Rule 19    set -> LBRACE arglist RBRACE
Rule 20    set -> LBRACE RBRACE
Rule 21    list -> LBRACKET arglist RBRACKET
Rule 22    list -> LBRACKET RBRACKET
Rule 23    lambda -> name MAPSTO expression
Rule 24    lambda -> LPAREN capture_list RPAREN_MAPSTO expression
Rule 25    capture_list -> name
Rule 26    capture_list -> capture_list COMMA name
Rule 27    operator_invocation -> expression OPERATOR expression

Terminals, with rules where they appear

COLON                : 9
COMMA                : 4 26
LBRACE               : 19 20
LBRACKET             : 21 22
LPAREN               : 7 8 8 14 24
MAPSTO               : 23
NAME                 : 6
NUMBER               : 15
OPERATOR             : 5 27
RBRACE               : 19 20
RBRACKET             : 21 22
RPAREN               : 7 8 8 14
RPAREN_MAPSTO        : 24
error                : 

Nonterminals, with rules where they appear

arglist              : 4 7 8 19 21
assign               : 1
call                 : 12
capture_list         : 24 26
expression           : 2 3 4 8 9 14 23 24 27 27
lambda               : 18
list                 : 16
literal              : 13
name                 : 7 9 10 23 25 26
operator_invocation  : 11
set                  : 17
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assign
    (2) statement -> . expression
    (9) assign -> . name COLON expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    statement                      shift and go to state 1
    assign                         shift and go to state 2
    expression                     shift and go to state 3
    name                           shift and go to state 4
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 1

    (0) S' -> statement .



state 2

    (1) statement -> assign .

    $end            reduce using rule 1 (statement -> assign .)


state 3

    (2) statement -> expression .
    (27) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 2 (statement -> expression .)
    OPERATOR        shift and go to state 17


state 4

    (9) assign -> name . COLON expression
    (10) expression -> name .
    (7) call -> name . LPAREN arglist RPAREN
    (23) lambda -> name . MAPSTO expression

    COLON           shift and go to state 18
    OPERATOR        reduce using rule 10 (expression -> name .)
    $end            reduce using rule 10 (expression -> name .)
    LPAREN          shift and go to state 19
    MAPSTO          shift and go to state 20


state 5

    (11) expression -> operator_invocation .

    OPERATOR        reduce using rule 11 (expression -> operator_invocation .)
    $end            reduce using rule 11 (expression -> operator_invocation .)
    RPAREN          reduce using rule 11 (expression -> operator_invocation .)
    RBRACKET        reduce using rule 11 (expression -> operator_invocation .)
    COMMA           reduce using rule 11 (expression -> operator_invocation .)
    RBRACE          reduce using rule 11 (expression -> operator_invocation .)


state 6

    (12) expression -> call .

    OPERATOR        reduce using rule 12 (expression -> call .)
    $end            reduce using rule 12 (expression -> call .)
    RPAREN          reduce using rule 12 (expression -> call .)
    RBRACKET        reduce using rule 12 (expression -> call .)
    COMMA           reduce using rule 12 (expression -> call .)
    RBRACE          reduce using rule 12 (expression -> call .)


state 7

    (13) expression -> literal .

    OPERATOR        reduce using rule 13 (expression -> literal .)
    $end            reduce using rule 13 (expression -> literal .)
    RPAREN          reduce using rule 13 (expression -> literal .)
    RBRACKET        reduce using rule 13 (expression -> literal .)
    COMMA           reduce using rule 13 (expression -> literal .)
    RBRACE          reduce using rule 13 (expression -> literal .)


state 8

    (14) expression -> LPAREN . expression RPAREN
    (8) call -> LPAREN . expression RPAREN LPAREN arglist RPAREN
    (24) lambda -> LPAREN . capture_list RPAREN_MAPSTO expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (25) capture_list -> . name
    (26) capture_list -> . capture_list COMMA name
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    expression                     shift and go to state 21
    capture_list                   shift and go to state 22
    name                           shift and go to state 23
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 9

    (5) name -> OPERATOR .

    COLON           reduce using rule 5 (name -> OPERATOR .)
    LPAREN          reduce using rule 5 (name -> OPERATOR .)
    MAPSTO          reduce using rule 5 (name -> OPERATOR .)
    OPERATOR        reduce using rule 5 (name -> OPERATOR .)
    $end            reduce using rule 5 (name -> OPERATOR .)
    RPAREN          reduce using rule 5 (name -> OPERATOR .)
    RPAREN_MAPSTO   reduce using rule 5 (name -> OPERATOR .)
    COMMA           reduce using rule 5 (name -> OPERATOR .)
    RBRACKET        reduce using rule 5 (name -> OPERATOR .)
    RBRACE          reduce using rule 5 (name -> OPERATOR .)


state 10

    (6) name -> NAME .

    COLON           reduce using rule 6 (name -> NAME .)
    LPAREN          reduce using rule 6 (name -> NAME .)
    MAPSTO          reduce using rule 6 (name -> NAME .)
    OPERATOR        reduce using rule 6 (name -> NAME .)
    $end            reduce using rule 6 (name -> NAME .)
    RPAREN          reduce using rule 6 (name -> NAME .)
    RPAREN_MAPSTO   reduce using rule 6 (name -> NAME .)
    COMMA           reduce using rule 6 (name -> NAME .)
    RBRACKET        reduce using rule 6 (name -> NAME .)
    RBRACE          reduce using rule 6 (name -> NAME .)


state 11

    (15) literal -> NUMBER .

    OPERATOR        reduce using rule 15 (literal -> NUMBER .)
    $end            reduce using rule 15 (literal -> NUMBER .)
    RPAREN          reduce using rule 15 (literal -> NUMBER .)
    RBRACKET        reduce using rule 15 (literal -> NUMBER .)
    COMMA           reduce using rule 15 (literal -> NUMBER .)
    RBRACE          reduce using rule 15 (literal -> NUMBER .)


state 12

    (16) literal -> list .

    OPERATOR        reduce using rule 16 (literal -> list .)
    $end            reduce using rule 16 (literal -> list .)
    RPAREN          reduce using rule 16 (literal -> list .)
    RBRACKET        reduce using rule 16 (literal -> list .)
    COMMA           reduce using rule 16 (literal -> list .)
    RBRACE          reduce using rule 16 (literal -> list .)


state 13

    (17) literal -> set .

    OPERATOR        reduce using rule 17 (literal -> set .)
    $end            reduce using rule 17 (literal -> set .)
    RPAREN          reduce using rule 17 (literal -> set .)
    RBRACKET        reduce using rule 17 (literal -> set .)
    COMMA           reduce using rule 17 (literal -> set .)
    RBRACE          reduce using rule 17 (literal -> set .)


state 14

    (18) literal -> lambda .

    OPERATOR        reduce using rule 18 (literal -> lambda .)
    $end            reduce using rule 18 (literal -> lambda .)
    RPAREN          reduce using rule 18 (literal -> lambda .)
    RBRACKET        reduce using rule 18 (literal -> lambda .)
    COMMA           reduce using rule 18 (literal -> lambda .)
    RBRACE          reduce using rule 18 (literal -> lambda .)


state 15

    (21) list -> LBRACKET . arglist RBRACKET
    (22) list -> LBRACKET . RBRACKET
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    RBRACKET        shift and go to state 25
    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    arglist                        shift and go to state 24
    expression                     shift and go to state 26
    name                           shift and go to state 27
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 16

    (19) set -> LBRACE . arglist RBRACE
    (20) set -> LBRACE . RBRACE
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    RBRACE          shift and go to state 29
    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    arglist                        shift and go to state 28
    expression                     shift and go to state 26
    name                           shift and go to state 27
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 17

    (27) operator_invocation -> expression OPERATOR . expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    expression                     shift and go to state 30
    name                           shift and go to state 27
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 18

    (9) assign -> name COLON . expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    name                           shift and go to state 27
    expression                     shift and go to state 31
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 19

    (7) call -> name LPAREN . arglist RPAREN
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    name                           shift and go to state 27
    arglist                        shift and go to state 32
    expression                     shift and go to state 26
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 20

    (23) lambda -> name MAPSTO . expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    name                           shift and go to state 27
    expression                     shift and go to state 33
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 21

    (14) expression -> LPAREN expression . RPAREN
    (8) call -> LPAREN expression . RPAREN LPAREN arglist RPAREN
    (27) operator_invocation -> expression . OPERATOR expression

    RPAREN          shift and go to state 34
    OPERATOR        shift and go to state 17


state 22

    (24) lambda -> LPAREN capture_list . RPAREN_MAPSTO expression
    (26) capture_list -> capture_list . COMMA name

    RPAREN_MAPSTO   shift and go to state 35
    COMMA           shift and go to state 36


state 23

    (10) expression -> name .
    (25) capture_list -> name .
    (7) call -> name . LPAREN arglist RPAREN
    (23) lambda -> name . MAPSTO expression

    RPAREN          reduce using rule 10 (expression -> name .)
    OPERATOR        reduce using rule 10 (expression -> name .)
    RPAREN_MAPSTO   reduce using rule 25 (capture_list -> name .)
    COMMA           reduce using rule 25 (capture_list -> name .)
    LPAREN          shift and go to state 19
    MAPSTO          shift and go to state 20


state 24

    (21) list -> LBRACKET arglist . RBRACKET
    (4) arglist -> arglist . COMMA expression

    RBRACKET        shift and go to state 37
    COMMA           shift and go to state 38


state 25

    (22) list -> LBRACKET RBRACKET .

    OPERATOR        reduce using rule 22 (list -> LBRACKET RBRACKET .)
    $end            reduce using rule 22 (list -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 22 (list -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 22 (list -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 22 (list -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 22 (list -> LBRACKET RBRACKET .)


state 26

    (3) arglist -> expression .
    (27) operator_invocation -> expression . OPERATOR expression

    RBRACKET        reduce using rule 3 (arglist -> expression .)
    COMMA           reduce using rule 3 (arglist -> expression .)
    RBRACE          reduce using rule 3 (arglist -> expression .)
    RPAREN          reduce using rule 3 (arglist -> expression .)
    OPERATOR        shift and go to state 17


state 27

    (10) expression -> name .
    (7) call -> name . LPAREN arglist RPAREN
    (23) lambda -> name . MAPSTO expression

    OPERATOR        reduce using rule 10 (expression -> name .)
    RBRACKET        reduce using rule 10 (expression -> name .)
    COMMA           reduce using rule 10 (expression -> name .)
    RBRACE          reduce using rule 10 (expression -> name .)
    $end            reduce using rule 10 (expression -> name .)
    RPAREN          reduce using rule 10 (expression -> name .)
    LPAREN          shift and go to state 19
    MAPSTO          shift and go to state 20


state 28

    (19) set -> LBRACE arglist . RBRACE
    (4) arglist -> arglist . COMMA expression

    RBRACE          shift and go to state 39
    COMMA           shift and go to state 38


state 29

    (20) set -> LBRACE RBRACE .

    OPERATOR        reduce using rule 20 (set -> LBRACE RBRACE .)
    $end            reduce using rule 20 (set -> LBRACE RBRACE .)
    RPAREN          reduce using rule 20 (set -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 20 (set -> LBRACE RBRACE .)
    COMMA           reduce using rule 20 (set -> LBRACE RBRACE .)
    RBRACE          reduce using rule 20 (set -> LBRACE RBRACE .)


state 30

    (27) operator_invocation -> expression OPERATOR expression .
    (27) operator_invocation -> expression . OPERATOR expression

    OPERATOR        reduce using rule 27 (operator_invocation -> expression OPERATOR expression .)
    $end            reduce using rule 27 (operator_invocation -> expression OPERATOR expression .)
    RPAREN          reduce using rule 27 (operator_invocation -> expression OPERATOR expression .)
    RBRACKET        reduce using rule 27 (operator_invocation -> expression OPERATOR expression .)
    COMMA           reduce using rule 27 (operator_invocation -> expression OPERATOR expression .)
    RBRACE          reduce using rule 27 (operator_invocation -> expression OPERATOR expression .)

  ! OPERATOR        [ shift and go to state 17 ]


state 31

    (9) assign -> name COLON expression .
    (27) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 9 (assign -> name COLON expression .)
    OPERATOR        shift and go to state 17


state 32

    (7) call -> name LPAREN arglist . RPAREN
    (4) arglist -> arglist . COMMA expression

    RPAREN          shift and go to state 40
    COMMA           shift and go to state 38


state 33

    (23) lambda -> name MAPSTO expression .
    (27) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 23 (lambda -> name MAPSTO expression .)
    RPAREN          reduce using rule 23 (lambda -> name MAPSTO expression .)
    RBRACKET        reduce using rule 23 (lambda -> name MAPSTO expression .)
    COMMA           reduce using rule 23 (lambda -> name MAPSTO expression .)
    RBRACE          reduce using rule 23 (lambda -> name MAPSTO expression .)
    OPERATOR        shift and go to state 17

  ! OPERATOR        [ reduce using rule 23 (lambda -> name MAPSTO expression .) ]


state 34

    (14) expression -> LPAREN expression RPAREN .
    (8) call -> LPAREN expression RPAREN . LPAREN arglist RPAREN

    OPERATOR        reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    LPAREN          shift and go to state 41


state 35

    (24) lambda -> LPAREN capture_list RPAREN_MAPSTO . expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    expression                     shift and go to state 42
    name                           shift and go to state 27
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 36

    (26) capture_list -> capture_list COMMA . name
    (5) name -> . OPERATOR
    (6) name -> . NAME

    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10

    name                           shift and go to state 43

state 37

    (21) list -> LBRACKET arglist RBRACKET .

    OPERATOR        reduce using rule 21 (list -> LBRACKET arglist RBRACKET .)
    $end            reduce using rule 21 (list -> LBRACKET arglist RBRACKET .)
    RPAREN          reduce using rule 21 (list -> LBRACKET arglist RBRACKET .)
    RBRACKET        reduce using rule 21 (list -> LBRACKET arglist RBRACKET .)
    COMMA           reduce using rule 21 (list -> LBRACKET arglist RBRACKET .)
    RBRACE          reduce using rule 21 (list -> LBRACKET arglist RBRACKET .)


state 38

    (4) arglist -> arglist COMMA . expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    expression                     shift and go to state 44
    name                           shift and go to state 27
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 39

    (19) set -> LBRACE arglist RBRACE .

    OPERATOR        reduce using rule 19 (set -> LBRACE arglist RBRACE .)
    $end            reduce using rule 19 (set -> LBRACE arglist RBRACE .)
    RPAREN          reduce using rule 19 (set -> LBRACE arglist RBRACE .)
    RBRACKET        reduce using rule 19 (set -> LBRACE arglist RBRACE .)
    COMMA           reduce using rule 19 (set -> LBRACE arglist RBRACE .)
    RBRACE          reduce using rule 19 (set -> LBRACE arglist RBRACE .)


state 40

    (7) call -> name LPAREN arglist RPAREN .

    OPERATOR        reduce using rule 7 (call -> name LPAREN arglist RPAREN .)
    $end            reduce using rule 7 (call -> name LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 7 (call -> name LPAREN arglist RPAREN .)
    RBRACKET        reduce using rule 7 (call -> name LPAREN arglist RPAREN .)
    COMMA           reduce using rule 7 (call -> name LPAREN arglist RPAREN .)
    RBRACE          reduce using rule 7 (call -> name LPAREN arglist RPAREN .)


state 41

    (8) call -> LPAREN expression RPAREN LPAREN . arglist RPAREN
    (3) arglist -> . expression
    (4) arglist -> . arglist COMMA expression
    (10) expression -> . name
    (11) expression -> . operator_invocation
    (12) expression -> . call
    (13) expression -> . literal
    (14) expression -> . LPAREN expression RPAREN
    (5) name -> . OPERATOR
    (6) name -> . NAME
    (27) operator_invocation -> . expression OPERATOR expression
    (7) call -> . name LPAREN arglist RPAREN
    (8) call -> . LPAREN expression RPAREN LPAREN arglist RPAREN
    (15) literal -> . NUMBER
    (16) literal -> . list
    (17) literal -> . set
    (18) literal -> . lambda
    (21) list -> . LBRACKET arglist RBRACKET
    (22) list -> . LBRACKET RBRACKET
    (19) set -> . LBRACE arglist RBRACE
    (20) set -> . LBRACE RBRACE
    (23) lambda -> . name MAPSTO expression
    (24) lambda -> . LPAREN capture_list RPAREN_MAPSTO expression

    LPAREN          shift and go to state 8
    OPERATOR        shift and go to state 9
    NAME            shift and go to state 10
    NUMBER          shift and go to state 11
    LBRACKET        shift and go to state 15
    LBRACE          shift and go to state 16

    expression                     shift and go to state 26
    arglist                        shift and go to state 45
    name                           shift and go to state 27
    operator_invocation            shift and go to state 5
    call                           shift and go to state 6
    literal                        shift and go to state 7
    list                           shift and go to state 12
    set                            shift and go to state 13
    lambda                         shift and go to state 14

state 42

    (24) lambda -> LPAREN capture_list RPAREN_MAPSTO expression .
    (27) operator_invocation -> expression . OPERATOR expression

    $end            reduce using rule 24 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    RPAREN          reduce using rule 24 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    RBRACKET        reduce using rule 24 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    COMMA           reduce using rule 24 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    RBRACE          reduce using rule 24 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .)
    OPERATOR        shift and go to state 17

  ! OPERATOR        [ reduce using rule 24 (lambda -> LPAREN capture_list RPAREN_MAPSTO expression .) ]


state 43

    (26) capture_list -> capture_list COMMA name .

    RPAREN_MAPSTO   reduce using rule 26 (capture_list -> capture_list COMMA name .)
    COMMA           reduce using rule 26 (capture_list -> capture_list COMMA name .)


state 44

    (4) arglist -> arglist COMMA expression .
    (27) operator_invocation -> expression . OPERATOR expression

    RBRACKET        reduce using rule 4 (arglist -> arglist COMMA expression .)
    COMMA           reduce using rule 4 (arglist -> arglist COMMA expression .)
    RBRACE          reduce using rule 4 (arglist -> arglist COMMA expression .)
    RPAREN          reduce using rule 4 (arglist -> arglist COMMA expression .)
    OPERATOR        shift and go to state 17


state 45

    (8) call -> LPAREN expression RPAREN LPAREN arglist . RPAREN
    (4) arglist -> arglist . COMMA expression

    RPAREN          shift and go to state 46
    COMMA           shift and go to state 38


state 46

    (8) call -> LPAREN expression RPAREN LPAREN arglist RPAREN .

    OPERATOR        reduce using rule 8 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    $end            reduce using rule 8 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 8 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    RBRACKET        reduce using rule 8 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    COMMA           reduce using rule 8 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)
    RBRACE          reduce using rule 8 (call -> LPAREN expression RPAREN LPAREN arglist RPAREN .)

