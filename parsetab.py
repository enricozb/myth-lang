
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'CDF7E00E8EFA487A864E0CEE31D4A929'
    
_lr_action_items = {'NAME':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,29,30,32,34,35,36,37,38,39,40,41,43,45,],[4,16,-8,-9,-10,-11,22,-12,-13,-14,-15,26,26,26,-24,26,26,26,16,-8,-19,16,-8,-17,16,16,16,26,42,-18,26,-16,-5,26,16,16,-6,]),'LPAREN':([0,4,8,13,14,15,16,17,18,19,22,26,33,34,37,40,],[8,18,8,8,8,8,-24,8,8,8,18,18,40,8,8,8,]),'NUMBER':([0,8,13,14,15,16,17,18,19,34,37,40,],[9,9,9,9,9,-24,9,9,9,9,9,9,]),'LBRACKET':([0,8,13,14,15,16,17,18,19,34,37,40,],[13,13,13,13,13,-24,13,13,13,13,13,13,]),'LBRACE':([0,8,13,14,15,16,17,18,19,34,37,40,],[14,14,14,14,14,-24,14,14,14,14,14,14,]),'$end':([1,2,3,4,5,6,7,9,10,11,12,24,26,28,29,30,32,36,38,39,41,45,],[0,-1,-2,-8,-9,-10,-11,-12,-13,-14,-15,-19,-8,-17,-25,-7,-20,-18,-16,-5,-21,-6,]),'COLON':([4,],[17,]),'MAPSTO':([4,22,26,],[19,19,19,]),'RPAREN':([5,6,7,9,10,11,12,20,22,24,25,26,28,29,31,32,36,38,39,41,43,44,45,],[-9,-10,-11,-12,-13,-14,-15,33,-8,-19,-3,-8,-17,-25,39,-20,-18,-16,-5,-21,-4,45,-6,]),'RBRACKET':([5,6,7,9,10,11,12,13,14,23,24,25,26,28,29,32,36,38,39,41,43,45,],[-9,-10,-11,-12,-13,-14,-15,24,28,36,-19,-3,-8,-17,-25,-20,-18,-16,-5,-21,-4,-6,]),'COMMA':([5,6,7,9,10,11,12,21,22,23,24,25,26,27,28,29,31,32,36,38,39,41,42,43,44,45,],[-9,-10,-11,-12,-13,-14,-15,35,-22,37,-19,-3,-8,37,-17,-25,37,-20,-18,-16,-5,-21,-23,-4,37,-6,]),'RBRACE':([5,6,7,9,10,11,12,24,25,26,27,28,29,32,36,38,39,41,43,45,],[-9,-10,-11,-12,-13,-14,-15,-19,-3,-8,38,-17,-25,-20,-18,-16,-5,-21,-4,-6,]),'RPAREN_MAPSTO':([21,22,42,],[34,-22,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'assign':([0,],[2,]),'expression':([0,8,13,14,15,17,18,19,34,37,40,],[3,20,25,25,29,30,25,32,41,43,25,]),'operator_invocation':([0,8,13,14,15,17,18,19,34,37,40,],[5,5,5,5,5,5,5,5,5,5,5,]),'call':([0,8,13,14,15,17,18,19,34,37,40,],[6,6,6,6,6,6,6,6,6,6,6,]),'literal':([0,8,13,14,15,17,18,19,34,37,40,],[7,7,7,7,7,7,7,7,7,7,7,]),'list':([0,8,13,14,15,17,18,19,34,37,40,],[10,10,10,10,10,10,10,10,10,10,10,]),'set':([0,8,13,14,15,17,18,19,34,37,40,],[11,11,11,11,11,11,11,11,11,11,11,]),'lambda':([0,8,13,14,15,17,18,19,34,37,40,],[12,12,12,12,12,12,12,12,12,12,12,]),'operator':([3,20,25,29,30,32,41,43,],[15,15,15,15,15,15,15,15,]),'capture_list':([8,],[21,]),'arglist':([13,14,18,40,],[23,27,31,44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> assign','statement',1,'p_statment','myth.py',90),
  ('statement -> expression','statement',1,'p_statment','myth.py',91),
  ('arglist -> expression','arglist',1,'p_arglist','myth.py',100),
  ('arglist -> arglist COMMA expression','arglist',3,'p_arglist','myth.py',101),
  ('call -> NAME LPAREN arglist RPAREN','call',4,'p_call_name','myth.py',110),
  ('call -> LPAREN expression RPAREN LPAREN arglist RPAREN','call',6,'p_call_expression','myth.py',116),
  ('assign -> NAME COLON expression','assign',3,'p_assign','myth.py',122),
  ('expression -> NAME','expression',1,'p_expression_name','myth.py',128),
  ('expression -> operator_invocation','expression',1,'p_expression','myth.py',134),
  ('expression -> call','expression',1,'p_expression','myth.py',135),
  ('expression -> literal','expression',1,'p_expression','myth.py',136),
  ('literal -> NUMBER','literal',1,'p_literal_number','myth.py',142),
  ('literal -> list','literal',1,'p_literal_number','myth.py',143),
  ('literal -> set','literal',1,'p_literal_number','myth.py',144),
  ('literal -> lambda','literal',1,'p_literal_number','myth.py',145),
  ('set -> LBRACE arglist RBRACE','set',3,'p_set','myth.py',151),
  ('set -> LBRACE RBRACKET','set',2,'p_set','myth.py',152),
  ('list -> LBRACKET arglist RBRACKET','list',3,'p_list','myth.py',161),
  ('list -> LBRACKET RBRACKET','list',2,'p_list','myth.py',162),
  ('lambda -> NAME MAPSTO expression','lambda',3,'p_lambda','myth.py',171),
  ('lambda -> LPAREN capture_list RPAREN_MAPSTO expression','lambda',4,'p_lambda','myth.py',172),
  ('capture_list -> NAME','capture_list',1,'p_capture_list','myth.py',181),
  ('capture_list -> capture_list COMMA NAME','capture_list',3,'p_capture_list','myth.py',182),
  ('operator -> NAME','operator',1,'p_operator','myth.py',191),
  ('operator_invocation -> expression operator expression','operator_invocation',3,'p_operator_invocation','myth.py',197),
]
